!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,n){n(1),t.exports=n(4)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(2).a.init()},function(t,e,n){"use strict";var r=n(3),o=function(){var t=wp.blocks,e=t.registerBlockType,n=t.InspectorControls,o=wp.components.RangeControl;e("gti/loremipsum",{title:"Lorem Ipsum Content",icon:"edit",category:"widgets",attributes:{content:{type:"array",source:"children",selector:"p"},paragraphs:{type:"number",default:5}},edit:function(t){var e=t.attributes,a=t.setAttributes,i=t.isSelected,u=e.paragraphs;return[i&&wp.element.createElement(n,{key:"inspector"},wp.element.createElement(o,{label:"Number of paragraphs",value:u,onChange:function(t){return a({paragraphs:t})},min:1,max:20})),wp.element.createElement(r.a,{paragraphs:u,setAttributes:a})]},save:function(){return null}})};e.a={init:o}},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),u=wp.element.Component,c=function(t){function e(){r(this,e);var t=o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments));return t.state={data:[]},t}return a(e,t),i(e,[{key:"componentDidMount",value:function(){this.getData()}},{key:"getData",value:function(){var t=this,e="https://baconipsum.com/api/?type=meat-and-filler&paras="+this.props.paragraphs;$.ajax({url:e,type:"GET"}).done(function(e){e&&e.length>0&&t.setState({data:e})})}},{key:"render",value:function(){var t=this.state.data?this.state.data:[];return 0===t.length?"loading !":(this.props.setAttributes({content:t}),[t.map(function(t){return wp.element.createElement("p",null,t)})])}}]),e}(u);e.a=c},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vanMvZGlzdC9ibG9ja3MuYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBkODY3MWE4YzZhNDU2ZjU2MWQ5YyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvYmxvY2tzLmpzIiwid2VicGFjazovLy8uL2pzL3NyYy9ibG9ja3MvbG9yZW1pcHN1bS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9zcmMvYmxvY2tzL3JlbmRlci1jb250ZW50LmpzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwidmFsdWUiLCJpbml0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19yZW5kZXJfY29udGVudF9fIiwiX3dwJGJsb2NrcyIsIndwIiwiYmxvY2tzIiwicmVnaXN0ZXJCbG9ja1R5cGUiLCJJbnNwZWN0b3JDb250cm9scyIsIlJhbmdlQ29udHJvbCIsImNvbXBvbmVudHMiLCJ0aXRsZSIsImljb24iLCJjYXRlZ29yeSIsImF0dHJpYnV0ZXMiLCJjb250ZW50IiwidHlwZSIsInNvdXJjZSIsInNlbGVjdG9yIiwicGFyYWdyYXBocyIsImRlZmF1bHQiLCJlZGl0IiwiX3JlZiIsInNldEF0dHJpYnV0ZXMiLCJpc1NlbGVjdGVkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJrZXkiLCJsYWJlbCIsIm9uQ2hhbmdlIiwibWluIiwibWF4Iiwic2F2ZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDb21wb25lbnQiLCJSZW5kZXJJcHN1bSIsIl9Db21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiYXJndW1lbnRzIiwic3RhdGUiLCJkYXRhIiwiZ2V0RGF0YSIsIl90aGlzMiIsInVybCIsIiQiLCJhamF4IiwiZG9uZSIsInNldFN0YXRlIiwibWFwIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0luQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUUsT0FHQSxJQUFBQyxHQUFBRixFQUFBRCxJQUNBSSxFQUFBSixFQUNBSyxHQUFBLEVBQ0FILFdBVUEsT0FOQUosR0FBQUUsR0FBQU0sS0FBQUgsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUgsR0FHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQTRCQUYsR0FBQVEsRUFBQVQsRUFHQUMsRUFBQVMsRUFBQVAsRUFHQUYsRUFBQVUsRUFBQSxTQUFBUCxFQUFBUSxFQUFBQyxHQUNBWixFQUFBYSxFQUFBVixFQUFBUSxJQUNBRyxPQUFBQyxlQUFBWixFQUFBUSxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWYsR0FDQSxHQUFBUSxHQUFBUixLQUFB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aUJDLEdBQWFOLEVBQWlCZCxFQUFhb0IsR0FBcUJwQixNSXhLeGhCcUIsRUFBY25ELEdBQUdvQixRQUFqQitCLFVBS0ZDLEVKaUxZLFNBQVVDLEdJaEwzQixRQUFBRCxLQUFjeEIsRUFBQTBCLEtBQUFGLEVBQUEsSUFBQUcsR0FBQXZCLEVBQUFzQixNQUFBRixFQUFBVixXQUFBNUQsT0FBQTBFLGVBQUFKLElBQUFLLE1BQUFILEtBQ0hJLFdBREcsT0FHYkgsR0FBS0ksT0FDSkMsU0FKWUwsRUowUGQsTUF6RUFwQixHQUFVaUIsRUFBYUMsR0FrQnZCVixFQUFhUyxJQUNaOUIsSUFBSyxvQkFDTDFCLE1BQU8sV0l6TFAwRCxLQUFLTyxhSmtNTHZDLElBQUssVUFDTDFCLE1BQU8sV0k3TEUsR0FBQWtFLEdBQUFSLEtBQ0hTLEVBQU0sMERBQTREVCxLQUFLUixNQUFNaEMsVUFFbkZrRCxHQUFFQyxNQUFRRixJQUFLQSxFQUFLcEQsS0FBTSxRQUFVdUQsS0FBTSxTQUFFTixHQUV0Q0EsR0FBUUEsRUFBS2IsT0FBUyxHQUMxQmUsRUFBS0ssVUFBWVAsY0oyTW5CdEMsSUFBSyxTQUNMMUIsTUFBTyxXSWpNUCxHQUFNYyxHQUFVNEMsS0FBS0ssTUFBTUMsS0FBT04sS0FBS0ssTUFBTUMsT0FHN0MsT0FBd0IsS0FBbkJsRCxFQUFRcUMsT0FDTCxhQUlSTyxLQUFLUixNQUFNNUIsZUFBaUJSLFFBQVNBLEtBSXBDQSxFQUFRMEQsSUFBSyxTQUFFM0UsR0FDZCxNQUFPTyxJQUFBb0IsUUFBQUMsY0FBQSxTQUFJNUIsV0owTVAyRCxHSTNQa0JELEVBdUQxQnhELEdBQUEsS0oyTU0sU0FBVXZCLEVBQVFEIiwiZmlsZSI6ImpzL2Rpc3QvYmxvY2tzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ibG9ja3NfbG9yZW1pcHN1bV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qKlxuICogSW1wb3J0IGFuZCBpbml0aWFsaXplIG91ciBibG9ja3NcbiAqL1xuXG5cblxuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19ibG9ja3NfbG9yZW1pcHN1bV9fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLmluaXQoKTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcmVuZGVyX2NvbnRlbnRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBnbG9iYWwgd3AgKi9cblxuXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZnVuY3Rpb25hbGl0eS5cbiAqL1xudmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuXG5cdC8qKlxuICAqIEludGVybmFsIGJsb2NrIGxpYnJhcmllc1xuICAqL1xuXHR2YXIgX3dwJGJsb2NrcyA9IHdwLmJsb2Nrcyxcblx0ICAgIHJlZ2lzdGVyQmxvY2tUeXBlID0gX3dwJGJsb2Nrcy5yZWdpc3RlckJsb2NrVHlwZSxcblx0ICAgIEluc3BlY3RvckNvbnRyb2xzID0gX3dwJGJsb2Nrcy5JbnNwZWN0b3JDb250cm9scztcblx0dmFyIFJhbmdlQ29udHJvbCA9IHdwLmNvbXBvbmVudHMuUmFuZ2VDb250cm9sO1xuXG5cdC8qKlxuICAqIFJlZ2lzdGVyIG91ciBibG9ja1xuICAqL1xuXG5cdHJlZ2lzdGVyQmxvY2tUeXBlKCdndGkvbG9yZW1pcHN1bScsIHtcblx0XHR0aXRsZTogJ0xvcmVtIElwc3VtIENvbnRlbnQnLFxuXHRcdGljb246ICdlZGl0Jyxcblx0XHRjYXRlZ29yeTogJ3dpZGdldHMnLFxuXG5cdFx0YXR0cmlidXRlczoge1xuXHRcdFx0Y29udGVudDoge1xuXHRcdFx0XHR0eXBlOiAnYXJyYXknLFxuXHRcdFx0XHRzb3VyY2U6ICdjaGlsZHJlbicsXG5cdFx0XHRcdHNlbGVjdG9yOiAncCdcblx0XHRcdH0sXG5cdFx0XHRwYXJhZ3JhcGhzOiB7XG5cdFx0XHRcdHR5cGU6ICdudW1iZXInLFxuXHRcdFx0XHRkZWZhdWx0OiA1XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGVkaXQ6IGZ1bmN0aW9uIGVkaXQoX3JlZikge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG5cdFx0XHQgICAgc2V0QXR0cmlidXRlcyA9IF9yZWYuc2V0QXR0cmlidXRlcyxcblx0XHRcdCAgICBpc1NlbGVjdGVkID0gX3JlZi5pc1NlbGVjdGVkO1xuXHRcdFx0dmFyIHBhcmFncmFwaHMgPSBhdHRyaWJ1dGVzLnBhcmFncmFwaHM7XG5cblx0XHRcdHZhciBpbnNwZWN0b3JDb250cm9scyA9IGlzU2VsZWN0ZWQgJiYgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRJbnNwZWN0b3JDb250cm9scyxcblx0XHRcdFx0eyBrZXk6ICdpbnNwZWN0b3InIH0sXG5cdFx0XHRcdHdwLmVsZW1lbnQuY3JlYXRlRWxlbWVudChSYW5nZUNvbnRyb2wsIHtcblx0XHRcdFx0XHRsYWJlbDogJ051bWJlciBvZiBwYXJhZ3JhcGhzJyxcblx0XHRcdFx0XHR2YWx1ZTogcGFyYWdyYXBocyxcblx0XHRcdFx0XHRvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmFsdWUpIHtcblx0XHRcdFx0XHRcdHJldHVybiBzZXRBdHRyaWJ1dGVzKHsgcGFyYWdyYXBoczogdmFsdWUgfSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRtaW46IDEsXG5cdFx0XHRcdFx0bWF4OiAyMFxuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuIFtpbnNwZWN0b3JDb250cm9scywgd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fcmVuZGVyX2NvbnRlbnRfX1tcImFcIiAvKiBkZWZhdWx0ICovXSwgeyBwYXJhZ3JhcGhzOiBwYXJhZ3JhcGhzLCBzZXRBdHRyaWJ1dGVzOiBzZXRBdHRyaWJ1dGVzIH0pXTtcblx0XHR9LFxuXHRcdHNhdmU6IGZ1bmN0aW9uIHNhdmUoKSB7XG5cdFx0XHQvLyBSZW5kZXJpbmcgaW4gUEhQXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH0pO1xufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9ICh7IGluaXQ6IGluaXQgfSk7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbXBvbmVudCA9IHdwLmVsZW1lbnQuQ29tcG9uZW50O1xuXG4vKipcbiAqIENyZWF0ZSBvdXIgcmVuZGVyIGNvbXBvbmVudFxuICovXG5cbnZhciBSZW5kZXJJcHN1bSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdF9pbmhlcml0cyhSZW5kZXJJcHN1bSwgX0NvbXBvbmVudCk7XG5cblx0ZnVuY3Rpb24gUmVuZGVySXBzdW0oKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbmRlcklwc3VtKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChSZW5kZXJJcHN1bS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlbmRlcklwc3VtKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cblx0XHRfdGhpcy5zdGF0ZSA9IHtcblx0XHRcdGRhdGE6IFtdXG5cdFx0fTtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXHQvKipcbiAgKiBHZXQgb3VyIGRhdGEgd2hlbiB0aGUgY29tcG9uZW50IGxvYWRzXG4gICovXG5cblxuXHRfY3JlYXRlQ2xhc3MoUmVuZGVySXBzdW0sIFt7XG5cdFx0a2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRcdHRoaXMuZ2V0RGF0YSgpO1xuXHRcdH1cblxuXHRcdC8qKlxuICAgKiBSdW4gYW4gQUpBWCByZXF1ZXN0IHRvIGdldCB0aGUgZGF0YSBhbmQgc2V0IHRoZSBzdGF0ZVxuICAgKi9cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0RGF0YScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldERhdGEoKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0dmFyIHVybCA9ICdodHRwczovL2JhY29uaXBzdW0uY29tL2FwaS8/dHlwZT1tZWF0LWFuZC1maWxsZXImcGFyYXM9JyArIHRoaXMucHJvcHMucGFyYWdyYXBocztcblxuXHRcdFx0JC5hamF4KHsgdXJsOiB1cmwsIHR5cGU6ICdHRVQnIH0pLmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0Ly8gU2F2ZSB0aGUgZGF0YSB0byBvdXIgc3RhdGVcblx0XHRcdFx0aWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0X3RoaXMyLnNldFN0YXRlKHsgZGF0YTogZGF0YSB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFJlbmRlciBvdXQgb3VyIGNvbnRlbnQuXG4gICAqXG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdyZW5kZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IHRoaXMuc3RhdGUuZGF0YSA/IHRoaXMuc3RhdGUuZGF0YSA6IFtdO1xuXG5cdFx0XHQvLyBJZiBubyBjb250ZW50IHlldCwgc2hvdyBsb2FkaW5nIG1lc3NhZ2Vcblx0XHRcdGlmIChjb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gXCJsb2FkaW5nICFcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBhdHRyaWJ1dGVzLCBzbyB3ZSBjYW4gdXNlIGluIG91ciBzYXZlIGZ1bmN0aW9uXG5cdFx0XHR0aGlzLnByb3BzLnNldEF0dHJpYnV0ZXMoeyBjb250ZW50OiBjb250ZW50IH0pO1xuXG5cdFx0XHQvLyBSZXR1cm4gb3VyIG1hcmt1cFxuXHRcdFx0cmV0dXJuIFtjb250ZW50Lm1hcChmdW5jdGlvbiAocCkge1xuXHRcdFx0XHRyZXR1cm4gd3AuZWxlbWVudC5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRcdCdwJyxcblx0XHRcdFx0XHRudWxsLFxuXHRcdFx0XHRcdHBcblx0XHRcdFx0KTtcblx0XHRcdH0pXTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gUmVuZGVySXBzdW07XG59KENvbXBvbmVudCk7XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoUmVuZGVySXBzdW0pO1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBqcy9kaXN0L2Jsb2Nrcy5idW5kbGUuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBkODY3MWE4YzZhNDU2ZjU2MWQ5YyIsIi8qKlxuICogSW1wb3J0IGFuZCBpbml0aWFsaXplIG91ciBibG9ja3NcbiAqL1xuXG5pbXBvcnQgbG9yZW1JcHN1bSBmcm9tICcuL2Jsb2Nrcy9sb3JlbWlwc3VtJztcblxubG9yZW1JcHN1bS5pbml0KCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9zcmMvYmxvY2tzLmpzIiwiLyogZ2xvYmFsIHdwICovXG5cbmltcG9ydCBSZW5kZXJJcHN1bSBmcm9tICcuL3JlbmRlci1jb250ZW50JztcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmdW5jdGlvbmFsaXR5LlxuICovXG5jb25zdCBpbml0ID0gKCkgPT4ge1xuXG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBibG9jayBsaWJyYXJpZXNcblx0ICovXG5cdGNvbnN0IHsgcmVnaXN0ZXJCbG9ja1R5cGUsIEluc3BlY3RvckNvbnRyb2xzIH0gPSB3cC5ibG9ja3M7XG5cdGNvbnN0IHsgUmFuZ2VDb250cm9sIH0gPSB3cC5jb21wb25lbnRzO1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBvdXIgYmxvY2tcblx0ICovXG5cdHJlZ2lzdGVyQmxvY2tUeXBlKCAnZ3RpL2xvcmVtaXBzdW0nLCB7XG5cdFx0dGl0bGU6ICdMb3JlbSBJcHN1bSBDb250ZW50Jyxcblx0XHRpY29uOiAnZWRpdCcsXG5cdFx0Y2F0ZWdvcnk6ICd3aWRnZXRzJyxcblxuXHRcdGF0dHJpYnV0ZXM6IHtcblx0XHRcdGNvbnRlbnQ6IHtcblx0XHRcdFx0dHlwZTogJ2FycmF5Jyxcblx0XHRcdFx0c291cmNlOiAnY2hpbGRyZW4nLFxuXHRcdFx0XHRzZWxlY3RvcjogJ3AnLFxuXHRcdFx0fSxcblx0XHRcdHBhcmFncmFwaHM6IHtcblx0XHRcdFx0dHlwZTogJ251bWJlcicsXG5cdFx0XHRcdGRlZmF1bHQ6IDVcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZWRpdCggeyBhdHRyaWJ1dGVzLCBzZXRBdHRyaWJ1dGVzLCBpc1NlbGVjdGVkIH0gKSB7XG5cdFx0XHRjb25zdCB7IHBhcmFncmFwaHMgfSA9IGF0dHJpYnV0ZXM7XG5cdFx0XHRjb25zdCBpbnNwZWN0b3JDb250cm9scyA9IGlzU2VsZWN0ZWQgJiYgKFxuXHRcdFx0XHRcdDxJbnNwZWN0b3JDb250cm9scyBrZXk9XCJpbnNwZWN0b3JcIj5cblx0XHRcdFx0XHRcdDxSYW5nZUNvbnRyb2xcblx0XHRcdFx0XHRcdFx0bGFiZWw9eyAnTnVtYmVyIG9mIHBhcmFncmFwaHMnIH1cblx0XHRcdFx0XHRcdFx0dmFsdWU9eyBwYXJhZ3JhcGhzIH1cblx0XHRcdFx0XHRcdFx0b25DaGFuZ2U9eyAoIHZhbHVlICkgPT4gc2V0QXR0cmlidXRlcyggeyBwYXJhZ3JhcGhzOiB2YWx1ZSB9ICkgfVxuXHRcdFx0XHRcdFx0XHRtaW49eyAxIH1cblx0XHRcdFx0XHRcdFx0bWF4PXsgMjAgfVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8L0luc3BlY3RvckNvbnRyb2xzPlxuXHRcdFx0KTtcblxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0aW5zcGVjdG9yQ29udHJvbHMsXG5cdFx0XHRcdDxSZW5kZXJJcHN1bSBwYXJhZ3JhcGhzPXsgcGFyYWdyYXBocyB9IHNldEF0dHJpYnV0ZXM9eyBzZXRBdHRyaWJ1dGVzIH0gLz5cblx0XHRcdF1cblx0XHR9LFxuXG5cdFx0c2F2ZSgpIHtcblx0XHRcdC8vIFJlbmRlcmluZyBpbiBQSFBcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdH0gKTtcblxufTtcblxuZXhwb3J0IGRlZmF1bHQgeyBpbml0IH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9zcmMvYmxvY2tzL2xvcmVtaXBzdW0uanMiLCJjb25zdCB7IENvbXBvbmVudCB9ID0gd3AuZWxlbWVudDtcblxuLyoqXG4gKiBDcmVhdGUgb3VyIHJlbmRlciBjb21wb25lbnRcbiAqL1xuY2xhc3MgUmVuZGVySXBzdW0gZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlciggLi4uYXJndW1lbnRzICk7XG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0ZGF0YTogW11cblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBvdXIgZGF0YSB3aGVuIHRoZSBjb21wb25lbnQgbG9hZHNcblx0ICovXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHRoaXMuZ2V0RGF0YSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJ1biBhbiBBSkFYIHJlcXVlc3QgdG8gZ2V0IHRoZSBkYXRhIGFuZCBzZXQgdGhlIHN0YXRlXG5cdCAqL1xuXHRnZXREYXRhKCkge1xuXHRcdGNvbnN0IHVybCA9ICdodHRwczovL2JhY29uaXBzdW0uY29tL2FwaS8/dHlwZT1tZWF0LWFuZC1maWxsZXImcGFyYXM9JyArIHRoaXMucHJvcHMucGFyYWdyYXBocztcblxuXHRcdCQuYWpheCggeyB1cmw6IHVybCwgdHlwZTogJ0dFVCcgfSApLmRvbmUoICggZGF0YSApID0+IHtcblx0XHRcdC8vIFNhdmUgdGhlIGRhdGEgdG8gb3VyIHN0YXRlXG5cdFx0XHRpZiAoIGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwICkge1xuXHRcdFx0XHR0aGlzLnNldFN0YXRlKCB7IGRhdGEgfSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW5kZXIgb3V0IG91ciBjb250ZW50LlxuXHQgKlxuXHQgKiBAcmV0dXJuIHsqfVxuXHQgKi9cblx0cmVuZGVyKCkge1xuXHRcdGNvbnN0IGNvbnRlbnQgPSB0aGlzLnN0YXRlLmRhdGEgPyB0aGlzLnN0YXRlLmRhdGEgOiBbXTtcblxuXHRcdC8vIElmIG5vIGNvbnRlbnQgeWV0LCBzaG93IGxvYWRpbmcgbWVzc2FnZVxuXHRcdGlmICggY29udGVudC5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRyZXR1cm4gXCJsb2FkaW5nICFcIjtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGF0dHJpYnV0ZXMsIHNvIHdlIGNhbiB1c2UgaW4gb3VyIHNhdmUgZnVuY3Rpb25cblx0XHR0aGlzLnByb3BzLnNldEF0dHJpYnV0ZXMoIHsgY29udGVudDogY29udGVudCB9ICk7XG5cblx0XHQvLyBSZXR1cm4gb3VyIG1hcmt1cFxuXHRcdHJldHVybiBbXG5cdFx0XHRjb250ZW50Lm1hcCggKCBwICkgPT4ge1xuXHRcdFx0XHRyZXR1cm4gPHA+e3B9PC9wPlxuXHRcdFx0fSApXG5cdFx0XTtcblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVuZGVySXBzdW07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9zcmMvYmxvY2tzL3JlbmRlci1jb250ZW50LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==